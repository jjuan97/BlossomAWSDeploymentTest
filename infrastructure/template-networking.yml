AWSTemplateFormatVersion: 2010-09-09
Description: Template for VPC and Subnets and other networking resources

Parameters:
  AppName:
    Description: Name of the application
    Type: String
    Default: blossom-deployment

  AppEnv:
    Description: Environment of the stack
    Type: String
    Default: dev

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16

    Public0:
      CIDR: 10.0.0.0/24

    Public1:
      CIDR: 10.0.1.0/24

    Private0:
      CIDR: 10.0.2.0/24

    Private1:
      CIDR: 10.0.3.0/24

Resources:
  # VPC and Subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${AppEnv}-VPC"

  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      CidrBlock: !FindInMap
        - SubnetConfig
        - Public0
        - CIDR
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${AppEnv}-PublicSubnet0"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs
      CidrBlock: !FindInMap
        - SubnetConfig
        - Public1
        - CIDR
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${AppEnv}-PublicSubnet1"

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      CidrBlock: !FindInMap
        - SubnetConfig
        - Private0
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${AppEnv}-PrivateSubnet0"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs
      CidrBlock: !FindInMap
        - SubnetConfig
        - Private1
        - CIDR
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${AppEnv}-PrivateSubnet1"

  # Internet Gateway and NAT Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${AppEnv}-InternetGateway"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet0

  # ACL
  PublicSubnetNetworkAclAssociation0:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl

  # Routing
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${AppEnv}-PublicRouteTable"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-${AppEnv}-PrivateRouteTable"

  PrivateRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the RDS DB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: 5432
          FromPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ECS to access RDS and ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

Outputs:
  VPCId:
    Description: VPCId of VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-VPC

  PublicSubnet0:
    Description: SubnetId of public subnet 0
    Value: !Ref PublicSubnet0
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PublicSubnet0

  PublicSubnet1:
    Description: SubnetId of public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PublicSubnet1

  PrivateSubnet0:
    Description: SubnetId of private subnet 0
    Value: !Ref PrivateSubnet0
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PrivateSubnet0

  PrivateSubnet1:
    Description: SubnetId of private subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PrivateSubnet1

  DefaultSecurityGroup:
    Description: DefaultSecurityGroup Id
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup

  RDSSecurityGroup:
    Description: RDSSecurityGroup Id
    Value: !Ref RDSSecurityGroup
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-RDSSecurityGroup

  ECSSecurityGroup:
    Description: ECSSecurityGroup Id
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-ECSSecurityGroup

  ALBSecurityGroup:
    Description: ALBSecurityGroup Id
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-ALBSecurityGroup
